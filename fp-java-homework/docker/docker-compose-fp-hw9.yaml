version: '3.5'
networks:
  kafka-demo:
    name: kafka-demo-net
    driver: bridge

services:
  zookeeper:
    image: zookeeper:3.4.9
    ports:
      - "2181:2181"
    networks:
      - kafka-demo
  kafka:
    image: wurstmeister/kafka:2.12-2.4.1
    environment:
      # KAFKA_BROKER_ID: 1
      # (Hack for Mac)use this if you want to have docker host node to be used as broadcast ip
      HOSTNAME_COMMAND: "/sbin/ip route|awk '/src/ { print $$NF }'"
      # Use below for Linux
      # HOSTNAME_COMMAND: "ip route get 1.2.3.4 | awk '{print $$7}'"
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "input_topic:10:1,sensor_type_count_topic:10:1,sensor_type_hourly_count_topic:10:1"
    depends_on:
      - zookeeper
    ports:
      - 9092
    networks:
      - kafka-demo

#  python-example:
#    # image: python:alpine3.10
#    image: python:2.7.16-alpine3.10
#    depends_on:
#      - kafka
#      - zookeeper
#    volumes:
#      - "./python:/python"
#    command: 'sleep 9000'
#    networks:
#      - kafka-demo

  data-generator:
    image: data-generator-build-image
    build:
      context: ..
      dockerfile: Dockerfile-hw9

  java-message-producer:
    image: data-generator-build-image
    networks:
      - kafka-demo
    volumes:
      - "../:/data-generator"
    working_dir: /usr/local/hw9
    command: './gradlew runMessageProducer -Dkafka_url=kafka:9092 -Dkafka_topic=input_topic -Dno_of_events=100 -Dstreaming=y -Dstreaming_interval_sec=20 --no-daemon'
    depends_on:
      - zookeeper
      - kafka

  java-message-consumer:
    image: data-generator-build-image
    networks:
      - kafka-demo
    volumes:
      - "../:/data-generator"
    working_dir: /usr/local/hw9
    command: './gradlew runConsumerStream -Dkafka_url=kafka:9092 -Dkafka_topic=input_topic --no-daemon'
    depends_on:
      - zookeeper
      - kafka
